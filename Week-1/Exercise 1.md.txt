
# Week 1 - Question 1


`
-- Select relevant variables from the US cities table. 
-- We are interested in "city name" and "state abbreviation" only (i.e. no zip codes for the moment), so when a city is associated with multiple lat/long coords 
-- I select the first combination  
with lkpUScities as (
    select 
        lower(trim(city_name)) as city_name, 
        lower(trim(state_abbr)) as state_abbr, 
        lat, long
    from (
        select 
            lower(trim(city_name)) as city_name, lower(trim(state_abbr)) as state_abbr, 
            lat, long, 
            row_number() over(partition by city_name, state_abbr order by city_name, state_abbr) as row_number
         from vk_data.resources.us_cities
         
    )
    where row_number = 1
),

-- Select the combination city and state for each potential customer 
lkpCustomersCities as (
    select 
        customer_id, 
        lower(trim(customer_city)) as customer_city, 
        lower(trim(customer_state)) as customer_state
    from vk_data.customers.customer_address 
),

-- Add lat/long coordinates to the city of the potential customer 
lkpCustomersGeoCoords as (
    select 
        customer_id, 
        lat as customer_lat,
        long as customer_long
    from lkpCustomersCities
    inner join lkpUScities
        on (lkpCustomersCities.customer_city = lkpUScities.city_name) and (lkpCustomersCities.customer_state = lkpUScities.state_abbr)
),

-- Select relevant variables from the supplier info table 
lkpSupplier as (
    select 
        supplier_id,  
        lower(trim(supplier_city)) as supplier_city,
        lower(trim(supplier_state)) as supplier_state 
    from vk_data.suppliers.supplier_info
), 

-- Add lat/long coordinates to the supplier table 
lkpSupplierGeoCoords as (
    select 
        supplier_id, 
        lat as supplier_lat,
        long as supplier_long
    from lkpSupplier
    left join lkpUScities
        on (lkpSupplier.supplier_city = lkpUScities.city_name) and (lkpSupplier.supplier_state = lkpUScities.state_abbr)

), 
-- Get all possible combinations potential consumers / suppliers and compute the distance in KM for each pair 
lkpConsumersSuppliersFullList as (
    select 
        a.customer_id, 
        b.supplier_id, 
        st_distance(st_makepoint(lkpCustomers.customer_long, lkpCustomers.customer_lat), st_makepoint(lkpSuppliers.supplier_long, lkpSuppliers.supplier_lat)) / 1000 as km_distance
    from (select customer_id from lkpCustomersGeoCoords) as a 
    cross join (select supplier_id from lkpSupplierGeoCoords) as b
    left join lkpCustomersGeoCoords as lkpCustomers
        on a.customer_id = lkpCustomers.customer_id
    left join lkpSupplierGeoCoords as lkpSuppliers
        on b.supplier_id = lkpSuppliers.supplier_id
), 

lkpConsumersSuppliersList as (
    select 
        customer_id, 
        supplier_id, 
        round(km_distance) as shopping_distance_km 
-- filter the combination potential customer - supplier with the min distance     
    from (select 
            customer_id,
            supplier_id, 
            km_distance, 
            row_number() over(partition by customer_id order by km_distance) as row_number
          from lkpConsumersSuppliersFullList)
    where row_number = 1 
)
select 
    main.customer_id,
    c.first_name, 
    c.last_name, 
    c.email,
    main.supplier_id,
    s.supplier_name,
    main.shopping_distance_km
from lkpConsumersSuppliersList as main 
-- Join additional table for customer / supplier info 
left join vk_data.customers.customer_data as c
    on main.customer_id = c.customer_id
left join vk_data.suppliers.supplier_info as s
    on main.supplier_id = s.supplier_id
    
`